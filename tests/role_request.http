### 환경 변수 설정
@baseUrl = http://localhost:8000/api/v1
@contentType = application/json
@userToken = 여기에_일반유저_토큰_입력
@adminToken = 여기에_관리자_토큰_입력

### 1. 일반 사용자 로그인 및 토큰 발급
# 응답에서 access_token 값을 복사하여 위의 userToken 변수에 설정하세요
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "user@example.com",
  "password": "password123"
}

### 2. 관리자 로그인 및 토큰 발급
# 응답에서 access_token 값을 복사하여 위의 adminToken 변수에 설정하세요
POST {{baseUrl}}/auth/admin/login
Content-Type: {{contentType}}

{
  "email": "admin@example.com",
  "password": "admin123"
}

### 3. 일반 사용자가 출제자 역할 요청
POST {{baseUrl}}/role-requests/
Content-Type: {{contentType}}
Authorization: Bearer {{userToken}}

{
  "role": "creator",
  "reason": "저는 문제 출제에 관심이 많으며, 다양한 문제를 제작하여 플랫폼에 기여하고 싶습니다."
}

### 4. 사용자 자신의 역할 변경 요청 내역 조회
GET {{baseUrl}}/role-requests/me
Authorization: Bearer {{userToken}}

### 5. 관리자: 대기 중인 역할 변경 요청 목록 조회
GET {{baseUrl}}/role-requests/pending
Authorization: Bearer {{adminToken}}

### 6. 관리자: 역할 변경 요청 승인 (실제 요청 ID 사용)
POST {{baseUrl}}/role-requests/1/approve
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "admin_comment": "검토 완료하였습니다. 출제자 역할을 부여합니다."
}

### 7. 관리자: 역할 변경 요청 거부 (실제 요청 ID 사용)
POST {{baseUrl}}/role-requests/2/reject
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "admin_comment": "요청이 승인 기준에 미치지 못합니다. 추가 경험 후 다시 지원해주세요."
}

### 8. 승인 후 새 토큰으로 로그인 확인
# 역할 변경 승인 응답에서 받은 새 토큰으로 테스트
GET {{baseUrl}}/jwt-test/user-role
Authorization: Bearer 여기에_새_토큰_입력